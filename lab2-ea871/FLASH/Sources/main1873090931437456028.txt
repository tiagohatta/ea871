Sources\main.o:     file format elf32-littlearmSources\main.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .text.delay   0000001c  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  4 .text.acendeLeds 00000078  00000000  00000000  00000050  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  5 .text.apagaLeds 00000074  00000000  00000000  000000c8  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  6 .text.main    00000190  00000000  00000000  0000013c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  7 .debug_info   0000010f  00000000  00000000  000002cc  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  8 .debug_abbrev 00000085  00000000  00000000  000003db  2**0                  CONTENTS, READONLY, DEBUGGING  9 .debug_loc    000000e0  00000000  00000000  00000460  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 10 .debug_aranges 00000038  00000000  00000000  00000540  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 11 .debug_macinfo 000026eb  00000000  00000000  00000578  2**0                  CONTENTS, READONLY, DEBUGGING 12 .debug_line   0000013c  00000000  00000000  00002c63  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 13 .debug_str    000000e4  00000000  00000000  00002d9f  2**0                  CONTENTS, READONLY, DEBUGGING 14 .comment      0000007a  00000000  00000000  00002e83  2**0                  CONTENTS, READONLY 15 .ARM.attributes 00000031  00000000  00000000  00002efd  2**0                  CONTENTS, READONLY 16 .debug_frame  00000090  00000000  00000000  00002f30  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 main.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .text.delay	00000000 .text.delay00000000 l    d  .text.acendeLeds	00000000 .text.acendeLeds00000000 l    d  .text.apagaLeds	00000000 .text.apagaLeds00000000 l    d  .text.main	00000000 .text.main00000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000000 g     F .text.delay	0000001c delay00000000 g     F .text.acendeLeds	00000078 acendeLeds00000000 g     F .text.apagaLeds	00000074 apagaLeds00000000 g     F .text.main	00000190 mainDisassembly of section .text.delay:00000000 <delay>:* @brief gera um atraso correspondente a I iteracoes* @param [in] i numero de iteracoes*/void delay( unsigned int i) {   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]	while (i) i--;   8:	e002      	b.n	10 <delay+0x10>   a:	687b      	ldr	r3, [r7, #4]   c:	3b01      	subs	r3, #1   e:	607b      	str	r3, [r7, #4]  10:	687b      	ldr	r3, [r7, #4]  12:	2b00      	cmp	r3, #0  14:	d1f9      	bne.n	a <delay+0xa>}  16:	46bd      	mov	sp, r7  18:	b002      	add	sp, #8  1a:	bd80      	pop	{r7, pc}Disassembly of section .text.acendeLeds:00000000 <acendeLeds>:* @brief acende leds* @param [in] vermelho char tal que v acende, f nao acende* @param [in] verde char tal que v acende, f nao acende* @param [in] azul char tal que v acende, f nao acende*/void acendeLeds(char vermelho, char verde, char azul){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	1dfb      	adds	r3, r7, #7   8:	7018      	strb	r0, [r3, #0]   a:	1dbb      	adds	r3, r7, #6   c:	7019      	strb	r1, [r3, #0]   e:	1d7b      	adds	r3, r7, #5  10:	701a      	strb	r2, [r3, #0]	if(vermelho == 'v' && verde == 'v'){  12:	1dfb      	adds	r3, r7, #7  14:	781b      	ldrb	r3, [r3, #0]  16:	2b76      	cmp	r3, #118	; 0x76  18:	d108      	bne.n	2c <acendeLeds+0x2c>  1a:	1dbb      	adds	r3, r7, #6  1c:	781b      	ldrb	r3, [r3, #0]  1e:	2b76      	cmp	r3, #118	; 0x76  20:	d104      	bne.n	2c <acendeLeds+0x2c>		GPIOB_PCOR = (11<<18); /*! Clear bit 18 e 19, LED vermelho em PTB18 e verde em PTB19 (acende) */  22:	4b12      	ldr	r3, [pc, #72]	; (6c <acendeLeds+0x6c>)  24:	22b0      	movs	r2, #176	; 0xb0  26:	0392      	lsls	r2, r2, #14  28:	601a      	str	r2, [r3, #0]  2a:	e00f      	b.n	4c <acendeLeds+0x4c>	}else{		if(vermelho == 'v')  2c:	1dfb      	adds	r3, r7, #7  2e:	781b      	ldrb	r3, [r3, #0]  30:	2b76      	cmp	r3, #118	; 0x76  32:	d103      	bne.n	3c <acendeLeds+0x3c>			GPIOB_PCOR = (1<<18); /*! Clear bit 18, LED vermelho em PTB18 (acende) */  34:	4b0d      	ldr	r3, [pc, #52]	; (6c <acendeLeds+0x6c>)  36:	2280      	movs	r2, #128	; 0x80  38:	02d2      	lsls	r2, r2, #11  3a:	601a      	str	r2, [r3, #0]		if(verde == 'v')  3c:	1dbb      	adds	r3, r7, #6  3e:	781b      	ldrb	r3, [r3, #0]  40:	2b76      	cmp	r3, #118	; 0x76  42:	d103      	bne.n	4c <acendeLeds+0x4c>			GPIOB_PCOR = (1<<19); /*! Clear bit 19, LED vermelho em PTB19 (acende) */  44:	4b09      	ldr	r3, [pc, #36]	; (6c <acendeLeds+0x6c>)  46:	2280      	movs	r2, #128	; 0x80  48:	0312      	lsls	r2, r2, #12  4a:	601a      	str	r2, [r3, #0]	}	if(azul == 'v')  4c:	1d7b      	adds	r3, r7, #5  4e:	781b      	ldrb	r3, [r3, #0]  50:	2b76      	cmp	r3, #118	; 0x76  52:	d102      	bne.n	5a <acendeLeds+0x5a>				GPIOD_PCOR = 10; /*! Clear bit 2, LED azul em PTD1 (acende) */  54:	4b06      	ldr	r3, [pc, #24]	; (70 <acendeLeds+0x70>)  56:	220a      	movs	r2, #10  58:	601a      	str	r2, [r3, #0]	delay(500000);        /*! Espera um tempo */  5a:	4b06      	ldr	r3, [pc, #24]	; (74 <acendeLeds+0x74>)  5c:	1c18      	adds	r0, r3, #0  5e:	f7ff fffe 	bl	0 <acendeLeds>			5e: R_ARM_THM_CALL	delay	return;  62:	46c0      	nop			; (mov r8, r8)}  64:	46bd      	mov	sp, r7  66:	b002      	add	sp, #8  68:	bd80      	pop	{r7, pc}  6a:	46c0      	nop			; (mov r8, r8)  6c:	400ff048 	.word	0x400ff048  70:	400ff0c8 	.word	0x400ff0c8  74:	0007a120 	.word	0x0007a120Disassembly of section .text.apagaLeds:00000000 <apagaLeds>:* @brief apaga leds* @param [in] vermelho char tal que v apaga* @param [in] verde char tal que v apaga* @param [in] azul char tal que v apaga*/void apagaLeds(char vermelho, char verde, char azul){   0:	b082b580 	.word	0xb082b580   4:	af00      	add	r7, sp, #0   6:	1dfb      	adds	r3, r7, #7   8:	7018      	strb	r0, [r3, #0]   a:	1dbb      	adds	r3, r7, #6   c:	7019      	strb	r1, [r3, #0]   e:	1d7b      	adds	r3, r7, #5  10:	701a      	strb	r2, [r3, #0]	if(vermelho == 'v' && verde == 'v'){  12:	1dfb      	adds	r3, r7, #7  14:	781b      	ldrb	r3, [r3, #0]  16:	2b76      	cmp	r3, #118	; 0x76  18:	d108      	bne.n	2c <apagaLeds+0x2c>  1a:	1dbb      	adds	r3, r7, #6  1c:	781b      	ldrb	r3, [r3, #0]  1e:	2b76      	cmp	r3, #118	; 0x76  20:	d104      	bne.n	2c <apagaLeds+0x2c>			GPIOB_PSOR = (11<<18); /*! Clear bit 18 e 19, LED vermelho em PTB18 e verde em PTB19 (apaga) */  22:	4b11      	ldr	r3, [pc, #68]	; (68 <apagaLeds+0x68>)  24:	22b0      	movs	r2, #176	; 0xb0  26:	0392      	lsls	r2, r2, #14  28:	601a      	str	r2, [r3, #0]  2a:	e00f      	b.n	4c <apagaLeds+0x4c>	}else{		if(vermelho == 'v')  2c:	1dfb      	adds	r3, r7, #7  2e:	781b      	ldrb	r3, [r3, #0]  30:	2b76      	cmp	r3, #118	; 0x76  32:	d103      	bne.n	3c <apagaLeds+0x3c>			GPIOB_PSOR = (1<<18); /*! Clear bit 18, LED vermelho em PTB18 (apaga) */  34:	4b0c      	ldr	r3, [pc, #48]	; (68 <apagaLeds+0x68>)  36:	2280      	movs	r2, #128	; 0x80  38:	02d2      	lsls	r2, r2, #11  3a:	601a      	str	r2, [r3, #0]		if(verde == 'v')  3c:	1dbb      	adds	r3, r7, #6  3e:	781b      	ldrb	r3, [r3, #0]  40:	2b76      	cmp	r3, #118	; 0x76  42:	d103      	bne.n	4c <apagaLeds+0x4c>			GPIOB_PSOR = (1<<19); /*! Clear bit 19, LED vermelho em PTB19 (apaga) */  44:	4b08      	ldr	r3, [pc, #32]	; (68 <apagaLeds+0x68>)  46:	2280      	movs	r2, #128	; 0x80  48:	0312      	lsls	r2, r2, #12  4a:	601a      	str	r2, [r3, #0]	}	if(azul == 'v')  4c:	1d7b      	adds	r3, r7, #5  4e:	781b      	ldrb	r3, [r3, #0]  50:	2b76      	cmp	r3, #118	; 0x76  52:	d102      	bne.n	5a <apagaLeds+0x5a>				GPIOD_PSOR = 10; /*! Clear bit 2, LED azul em PTD1 (apaga) */  54:	4b05      	ldr	r3, [pc, #20]	; (6c <apagaLeds+0x6c>)  56:	220a      	movs	r2, #10  58:	601a      	str	r2, [r3, #0]	delay(500000);		  /*! Espera um tempo */  5a:	4b05      	ldr	r3, [pc, #20]	; (70 <apagaLeds+0x70>)  5c:	1c18      	adds	r0, r3, #0  5e:	f7ff fffe 	bl	0 <apagaLeds>			5e: R_ARM_THM_CALL	delay}  62:	46bd      	mov	sp, r7  64:	b002      	add	sp, #8  66:	bd80      	pop	{r7, pc}  68:	400ff044 	.word	0x400ff044  6c:	400ff0c4 	.word	0x400ff0c4  70:	0007a120 	.word	0x0007a120Disassembly of section .text.main:00000000 <main>:/*!* @brief Sequencia de cores das luzes dos leds*/int main( void){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0	SIM_SCGC5 = SIM_SCGC5 | (101<<10);    /*!  Habilita clock GPIO do PORTB e PORTD */   6:	4b58      	ldr	r3, [pc, #352]	; (168 <main+0x168>)   8:	4a57      	ldr	r2, [pc, #348]	; (168 <main+0x168>)   a:	6812      	ldr	r2, [r2, #0]   c:	21ca      	movs	r1, #202	; 0xca   e:	0249      	lsls	r1, r1, #9  10:	430a      	orrs	r2, r1  12:	601a      	str	r2, [r3, #0]	PORTB_PCR18 = PORTB_PCR18 & 0xFFFFF8FF; /*! Zera bits 10, 9 e 8 (MUX) de PTB18 */  14:	4b55      	ldr	r3, [pc, #340]	; (16c <main+0x16c>)  16:	4a55      	ldr	r2, [pc, #340]	; (16c <main+0x16c>)  18:	6811      	ldr	r1, [r2, #0]  1a:	4a55      	ldr	r2, [pc, #340]	; (170 <main+0x170>)  1c:	400a      	ands	r2, r1  1e:	601a      	str	r2, [r3, #0]	PORTB_PCR18 = PORTB_PCR18 | 0x00000100; /*! Seta bit 8 do MUX de PTB18, assim os 3 bits de MUX serao 001 */  20:	4b52      	ldr	r3, [pc, #328]	; (16c <main+0x16c>)  22:	4a52      	ldr	r2, [pc, #328]	; (16c <main+0x16c>)  24:	6812      	ldr	r2, [r2, #0]  26:	2180      	movs	r1, #128	; 0x80  28:	0049      	lsls	r1, r1, #1  2a:	430a      	orrs	r2, r1  2c:	601a      	str	r2, [r3, #0]		PORTB_PCR19 = PORTB_PCR19 & 0xFFFFF8FF; /*! Zera bits 10, 9 e 8 (MUX) de PTB19 */  2e:	4b51      	ldr	r3, [pc, #324]	; (174 <main+0x174>)  30:	4a50      	ldr	r2, [pc, #320]	; (174 <main+0x174>)  32:	6811      	ldr	r1, [r2, #0]  34:	4a4e      	ldr	r2, [pc, #312]	; (170 <main+0x170>)  36:	400a      	ands	r2, r1  38:	601a      	str	r2, [r3, #0]	PORTB_PCR19 = PORTB_PCR19 | 0x00000100; /*! Seta bit 8 do MUX de PTB19, assim os 3 bits de MUX serao 001 */  3a:	4b4e      	ldr	r3, [pc, #312]	; (174 <main+0x174>)  3c:	4a4d      	ldr	r2, [pc, #308]	; (174 <main+0x174>)  3e:	6812      	ldr	r2, [r2, #0]  40:	2180      	movs	r1, #128	; 0x80  42:	0049      	lsls	r1, r1, #1  44:	430a      	orrs	r2, r1  46:	601a      	str	r2, [r3, #0]		PORTD_PCR1 = PORTD_PCR1 & 0xFFFFF8FF; /*! Zera bits 10, 9 e 8 (MUX) de PTD1 */  48:	4b4b      	ldr	r3, [pc, #300]	; (178 <main+0x178>)  4a:	4a4b      	ldr	r2, [pc, #300]	; (178 <main+0x178>)  4c:	6811      	ldr	r1, [r2, #0]  4e:	4a48      	ldr	r2, [pc, #288]	; (170 <main+0x170>)  50:	400a      	ands	r2, r1  52:	601a      	str	r2, [r3, #0]	PORTD_PCR1 = PORTD_PCR1 | 0x00000100; /*! Seta bit 8 do MUX de PTD1, assim os 3 bits de MUX serao 001 */  54:	4b48      	ldr	r3, [pc, #288]	; (178 <main+0x178>)  56:	4a48      	ldr	r2, [pc, #288]	; (178 <main+0x178>)  58:	6812      	ldr	r2, [r2, #0]  5a:	2180      	movs	r1, #128	; 0x80  5c:	0049      	lsls	r1, r1, #1  5e:	430a      	orrs	r2, r1  60:	601a      	str	r2, [r3, #0]		GPIOB_PDDR  = GPIOB_PDDR  | (11<<18);    /*! Seta pinos 18 e 19 do PORTB como saida */  62:	4b46      	ldr	r3, [pc, #280]	; (17c <main+0x17c>)  64:	4a45      	ldr	r2, [pc, #276]	; (17c <main+0x17c>)  66:	6812      	ldr	r2, [r2, #0]  68:	21b0      	movs	r1, #176	; 0xb0  6a:	0389      	lsls	r1, r1, #14  6c:	430a      	orrs	r2, r1  6e:	601a      	str	r2, [r3, #0]	GPIOD_PDDR  = GPIOD_PDDR  | 10;    /*! Seta pino 1 do PORTD como saida */  70:	4b43      	ldr	r3, [pc, #268]	; (180 <main+0x180>)  72:	4a43      	ldr	r2, [pc, #268]	; (180 <main+0x180>)  74:	6812      	ldr	r2, [r2, #0]  76:	210a      	movs	r1, #10  78:	430a      	orrs	r2, r1  7a:	601a      	str	r2, [r3, #0]	GPIOB_PSOR = (11<<18); /*! Set bit 18, LED vermelho em PTB18 (apaga) */  7c:	4b41      	ldr	r3, [pc, #260]	; (184 <main+0x184>)  7e:	22b0      	movs	r2, #176	; 0xb0  80:	0392      	lsls	r2, r2, #14  82:	601a      	str	r2, [r3, #0]	GPIOD_PSOR = (10); /*! Set bit 18, LED vermelho em PTB18 (apaga) */  84:	4b40      	ldr	r3, [pc, #256]	; (188 <main+0x188>)  86:	220a      	movs	r2, #10  88:	601a      	str	r2, [r3, #0]		int i = 0;  8a:	2300      	movs	r3, #0  8c:	607b      	str	r3, [r7, #4]	for(;;) 	{		for(i = 0; i < 5; i++){  8e:	2300      	movs	r3, #0  90:	607b      	str	r3, [r7, #4]  92:	e00c      	b.n	ae <main+0xae>			/*! cor vermelha */			acendeLeds('v', 'f', 'f');		/*! Liga apenas led vermelho */  94:	2076      	movs	r0, #118	; 0x76  96:	2166      	movs	r1, #102	; 0x66  98:	2266      	movs	r2, #102	; 0x66  9a:	f7ff fffe 	bl	0 <main>			9a: R_ARM_THM_CALL	acendeLeds			apagaLeds('v', 'f', 'f');		/*! Apaga o led vermelho */  9e:	2076      	movs	r0, #118	; 0x76  a0:	2166      	movs	r1, #102	; 0x66  a2:	2266      	movs	r2, #102	; 0x66  a4:	f7ff fffe 	bl	0 <main>			a4: R_ARM_THM_CALL	apagaLeds	GPIOD_PSOR = (10); /*! Set bit 18, LED vermelho em PTB18 (apaga) */		int i = 0;	for(;;) 	{		for(i = 0; i < 5; i++){  a8:	687b      	ldr	r3, [r7, #4]  aa:	3301      	adds	r3, #1  ac:	607b      	str	r3, [r7, #4]  ae:	687b      	ldr	r3, [r7, #4]  b0:	2b04      	cmp	r3, #4  b2:	ddef      	ble.n	94 <main+0x94>			/*! cor vermelha */			acendeLeds('v', 'f', 'f');		/*! Liga apenas led vermelho */			apagaLeds('v', 'f', 'f');		/*! Apaga o led vermelho */		}		for(i = 0; i < 5; i++){  b4:	2300      	movs	r3, #0  b6:	607b      	str	r3, [r7, #4]  b8:	e00c      	b.n	d4 <main+0xd4>			/*! branco */			acendeLeds('v', 'v', 'v');		/*! Acende todos os leds para cor branca */  ba:	2076      	movs	r0, #118	; 0x76  bc:	2176      	movs	r1, #118	; 0x76  be:	2276      	movs	r2, #118	; 0x76  c0:	f7ff fffe 	bl	0 <main>			c0: R_ARM_THM_CALL	acendeLeds			apagaLeds('v', 'v', 'v');		/*! Apaga todos os leds */  c4:	2076      	movs	r0, #118	; 0x76  c6:	2176      	movs	r1, #118	; 0x76  c8:	2276      	movs	r2, #118	; 0x76  ca:	f7ff fffe 	bl	0 <main>			ca: R_ARM_THM_CALL	apagaLeds			/*! cor vermelha */			acendeLeds('v', 'f', 'f');		/*! Liga apenas led vermelho */			apagaLeds('v', 'f', 'f');		/*! Apaga o led vermelho */		}		for(i = 0; i < 5; i++){  ce:	687b      	ldr	r3, [r7, #4]  d0:	3301      	adds	r3, #1  d2:	607b      	str	r3, [r7, #4]  d4:	687b      	ldr	r3, [r7, #4]  d6:	2b04      	cmp	r3, #4  d8:	ddef      	ble.n	ba <main+0xba>			/*! branco */			acendeLeds('v', 'v', 'v');		/*! Acende todos os leds para cor branca */			apagaLeds('v', 'v', 'v');		/*! Apaga todos os leds */		}		for(i = 0; i < 5; i++){  da:	2300      	movs	r3, #0  dc:	607b      	str	r3, [r7, #4]  de:	e00c      	b.n	fa <main+0xfa>			/*! amarelo */			acendeLeds('v', 'v', 'f');		/*! Acende vermelho e verde que formam cor amarela */  e0:	2076      	movs	r0, #118	; 0x76  e2:	2176      	movs	r1, #118	; 0x76  e4:	2266      	movs	r2, #102	; 0x66  e6:	f7ff fffe 	bl	0 <main>			e6: R_ARM_THM_CALL	acendeLeds			apagaLeds('v', 'v', 'f');		/*! Apaga os leds ligados */  ea:	2076      	movs	r0, #118	; 0x76  ec:	2176      	movs	r1, #118	; 0x76  ee:	2266      	movs	r2, #102	; 0x66  f0:	f7ff fffe 	bl	0 <main>			f0: R_ARM_THM_CALL	apagaLeds			/*! branco */			acendeLeds('v', 'v', 'v');		/*! Acende todos os leds para cor branca */			apagaLeds('v', 'v', 'v');		/*! Apaga todos os leds */		}		for(i = 0; i < 5; i++){  f4:	687b      	ldr	r3, [r7, #4]  f6:	3301      	adds	r3, #1  f8:	607b      	str	r3, [r7, #4]  fa:	687b      	ldr	r3, [r7, #4]  fc:	2b04      	cmp	r3, #4  fe:	ddef      	ble.n	e0 <main+0xe0>			/*! amarelo */			acendeLeds('v', 'v', 'f');		/*! Acende vermelho e verde que formam cor amarela */			apagaLeds('v', 'v', 'f');		/*! Apaga os leds ligados */		}				for(i = 0; i < 5; i++){ 100:	2300      	movs	r3, #0 102:	607b      	str	r3, [r7, #4] 104:	e00c      	b.n	120 <main+0x120>			/*! ciano */			acendeLeds('f', 'v', 'v');		/*! Acende leds verde e azul para formar a cor ciano */ 106:	2066      	movs	r0, #102	; 0x66 108:	2176      	movs	r1, #118	; 0x76 10a:	2276      	movs	r2, #118	; 0x76 10c:	f7ff fffe 	bl	0 <main>			10c: R_ARM_THM_CALL	acendeLeds			apagaLeds('f', 'v', 'v');		/*! Apaga os leds */ 110:	2066      	movs	r0, #102	; 0x66 112:	2176      	movs	r1, #118	; 0x76 114:	2276      	movs	r2, #118	; 0x76 116:	f7ff fffe 	bl	0 <main>			116: R_ARM_THM_CALL	apagaLeds			/*! amarelo */			acendeLeds('v', 'v', 'f');		/*! Acende vermelho e verde que formam cor amarela */			apagaLeds('v', 'v', 'f');		/*! Apaga os leds ligados */		}				for(i = 0; i < 5; i++){ 11a:	687b      	ldr	r3, [r7, #4] 11c:	3301      	adds	r3, #1 11e:	607b      	str	r3, [r7, #4] 120:	687b      	ldr	r3, [r7, #4] 122:	2b04      	cmp	r3, #4 124:	ddef      	ble.n	106 <main+0x106>			/*! ciano */			acendeLeds('f', 'v', 'v');		/*! Acende leds verde e azul para formar a cor ciano */			apagaLeds('f', 'v', 'v');		/*! Apaga os leds */		}				for(i = 0; i < 5; i++){ 126:	2300      	movs	r3, #0 128:	607b      	str	r3, [r7, #4] 12a:	e00c      	b.n	146 <main+0x146>			/*! magenta */			acendeLeds('v', 'f', 'v');		/*! Acende os leds vermelho e azul para o magenta */ 12c:	2076      	movs	r0, #118	; 0x76 12e:	2166      	movs	r1, #102	; 0x66 130:	2276      	movs	r2, #118	; 0x76 132:	f7ff fffe 	bl	0 <main>			132: R_ARM_THM_CALL	acendeLeds			apagaLeds('v', 'f', 'v');		/*! Apaga os leds vermelho e azul */ 136:	2076      	movs	r0, #118	; 0x76 138:	2166      	movs	r1, #102	; 0x66 13a:	2276      	movs	r2, #118	; 0x76 13c:	f7ff fffe 	bl	0 <main>			13c: R_ARM_THM_CALL	apagaLeds			/*! ciano */			acendeLeds('f', 'v', 'v');		/*! Acende leds verde e azul para formar a cor ciano */			apagaLeds('f', 'v', 'v');		/*! Apaga os leds */		}				for(i = 0; i < 5; i++){ 140:	687b      	ldr	r3, [r7, #4] 142:	3301      	adds	r3, #1 144:	607b      	str	r3, [r7, #4] 146:	687b      	ldr	r3, [r7, #4] 148:	2b04      	cmp	r3, #4 14a:	ddef      	ble.n	12c <main+0x12c>			/*! magenta */			acendeLeds('v', 'f', 'v');		/*! Acende os leds vermelho e azul para o magenta */			apagaLeds('v', 'f', 'v');		/*! Apaga os leds vermelho e azul */		}				for(i = 0; i < 5; i++){ 14c:	2300      	movs	r3, #0 14e:	607b      	str	r3, [r7, #4] 150:	e006      	b.n	160 <main+0x160>			/*! preto */			delay(500000);        /*! Como o preto sao todos leds desligados, chama a funcao delay */ 152:	4b0e      	ldr	r3, [pc, #56]	; (18c <main+0x18c>) 154:	1c18      	adds	r0, r3, #0 156:	f7ff fffe 	bl	0 <main>			156: R_ARM_THM_CALL	delay			/*! magenta */			acendeLeds('v', 'f', 'v');		/*! Acende os leds vermelho e azul para o magenta */			apagaLeds('v', 'f', 'v');		/*! Apaga os leds vermelho e azul */		}				for(i = 0; i < 5; i++){ 15a:	687b      	ldr	r3, [r7, #4] 15c:	3301      	adds	r3, #1 15e:	607b      	str	r3, [r7, #4] 160:	687b      	ldr	r3, [r7, #4] 162:	2b04      	cmp	r3, #4 164:	ddf5      	ble.n	152 <main+0x152>			/*! preto */			delay(500000);        /*! Como o preto sao todos leds desligados, chama a funcao delay */		}			} 166:	e792      	b.n	8e <main+0x8e> 168:	40048038 	.word	0x40048038 16c:	4004a048 	.word	0x4004a048 170:	fffff8ff 	.word	0xfffff8ff 174:	4004a04c 	.word	0x4004a04c 178:	4004c004 	.word	0x4004c004 17c:	400ff054 	.word	0x400ff054 180:	400ff0d4 	.word	0x400ff0d4 184:	400ff044 	.word	0x400ff044 188:	400ff0c4 	.word	0x400ff0c4 18c:	0007a120 	.word	0x0007a120